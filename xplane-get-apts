#!/usr/bin/env python

import urllib2
import argparse
import os.path
import json
import sys
import base64
import zipfile
from cStringIO import StringIO
import time
import traceback

parser = argparse.ArgumentParser()
parser.add_argument('-o', metavar='DIR', dest='output_dir', default='out',
		help='output directory')
parser.add_argument('-u', metavar='URL', dest='url',
		default='https://gateway.x-plane.com',
		help='X-Plane Gateway API URL')
parser.add_argument('--filter-prefix', metavar='PREFIX', dest='filter_prefix',
		default=[], action='append',
		help='download only airports with ICAO codes starting with the given '
		'prefix (may be given more than once)')

args = parser.parse_args()

def load_json(url_suffix, filename_suffix):
	filename = os.path.abspath(os.path.join(args.output_dir, filename_suffix))
	try:
		return json.load(open(filename))
	except Exception:
		response_str = urllib2.urlopen(args.url + url_suffix).read()
		time.sleep(1)
		response = json.loads(response_str)
		try:
			os.makedirs(os.path.dirname(filename))
		except OSError:
			pass
		with open(filename, 'w') as f:
			f.write(response_str)
		return response

meta = load_json('/apiv1/airports', 'meta.json')

ofile = open(os.path.join(args.output_dir, 'apt.dat'), 'w')
ofile.write('A\n')
ofile.write('1100 Generated by xplane-get-apts\n')

for airport in meta['airports']:
	code = airport['AirportCode'].upper()

	try:
		if args.filter_prefix and not any(code.startswith(p) for p in
				args.filter_prefix):
			continue

		if airport['Deprecated']:
			continue

		scenery_id = airport['RecommendedSceneryId']
		if not scenery_id:
			continue

		scenery_path = 'Scenery/%d-%s.json' % (scenery_id, code)
		print >>sys.stderr, scenery_path
		scenery = load_json('/apiv1/scenery/%d' % (scenery_id,), scenery_path)
		scenery = scenery['scenery']
		assert scenery['icao'] == code

		zip_data = base64.b64decode(scenery['masterZipBlob'])
		zip_obj = zipfile.ZipFile(StringIO(zip_data))
		dat = zip_obj.read('%s.dat' % (code,))
		dat = dat.splitlines()
		assert dat[1].startswith('1000 ') or dat[1].startswith('1050 ') \
				or dat[1].startswith('1100 '), \
				"Unrecognized version: " + dat[1]
		assert dat[-1] == '99'
		ofile.write('\n'.join(dat[2:-1]) + '\n')
	except Exception:
		traceback.print_exc()

ofile.write('99\n')
ofile.close()
